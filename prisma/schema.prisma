generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusOrcamento {
  ABERTO
  APROVADO
  REPROVADO
}

enum MetodoPagamento {
  PIX
  DINHEIRO
  DEBITO
  CREDITO_AVISTA
  CREDITO_PARCELADO
}

enum TipoMovimentacao {
  ENTRADA
  SAIDA
}

model Loja {
  id       String   @id @default(uuid())
  nome     String   @unique
  cnpj     String   @unique
  email    String   @unique
  senha    String
  criadoEm DateTime @default(now())

  // Relacionamentos
  produtos                 Produto[]
  clientes                 Cliente[]
  orcamentos               Orcamento[]
  funcionarios             Usuario[]
  movimentacoesEstoque     MovimentacaoEstoque[]
  movimentacoesFinanceiras MovimentacaoFinanceira[]

  @@map("lojas")
}

model Usuario {
  id         String   @id @default(uuid())
  nome       String
  email      String   @unique
  senha      String
  loja       Loja?    @relation(fields: [lojaId], references: [id])
  lojaId     String?
  ativo      Boolean  @default(true)
  permissoes String[]

  @@map("usuarios")
}

model Produto {
  id             String                @id @default(uuid())
  nome           String
  estoque        Int                   @default(0)
  precoCusto     Float
  precoVenda     Float?
  loja           Loja                  @relation(fields: [lojaId], references: [id])
  lojaId         String
  itensOrcamento ItemOrcamento[]
  movimentacoes  MovimentacaoEstoque[]

  @@map("produtos")
}

model Cliente {
  id         String      @id @default(uuid())
  nome       String
  email      String      @unique
  telefone   String
  cpfCnpj    String      @unique
  endereco   String
  loja       Loja        @relation(fields: [lojaId], references: [id])
  lojaId     String
  criadoEm   DateTime    @default(now())
  orcamentos Orcamento[]

  @@map("clientes")
}

model Orcamento {
  id              String           @id @default(uuid())
  cliente         Cliente?         @relation(fields: [clienteId], references: [id])
  clienteId       String?
  itens           ItemOrcamento[]
  servicos        Servico[]
  total           Float
  status          StatusOrcamento  @default(ABERTO)
  metodoPagamento MetodoPagamento?
  numeroParcelas  Int? // só preenche se for crédito parcelado
  taxaJuros       Float? // porcentagem, ex: 5.0 representa 5%
  descricao       String
  loja            Loja             @relation(fields: [lojaId], references: [id])
  lojaId          String
  criadoEm        DateTime         @default(now())

  @@map("orcamentos")
}

model ItemOrcamento {
  id            String    @id @default(uuid())
  orcamento     Orcamento @relation(fields: [orcamentoId], references: [id])
  orcamentoId   String
  produto       Produto?  @relation(fields: [produtoId], references: [id])
  produtoId     String?
  quantidade    Int       @default(1)
  precoUnitario Float

  @@map("itens_orcamento")
}

model Servico {
  id          String    @id @default(uuid())
  orcamento   Orcamento @relation(fields: [orcamentoId], references: [id])
  orcamentoId String
  descricao   String
  valor       Float

  @@map("servicos")
}

model MovimentacaoEstoque {
  id         String   @id @default(uuid())
  produto    Produto  @relation(fields: [produtoId], references: [id])
  produtoId  String
  quantidade Int // Negativo para saída, positivo para entrada
  motivo     String // "VENDA", "COMPRA", "AJUSTE"
  loja       Loja     @relation(fields: [lojaId], references: [id])
  lojaId     String
  data       DateTime @default(now())

  @@map("movimentacoes_estoque")
}

model MovimentacaoFinanceira {
  id              String           @id @default(uuid())
  tipo            TipoMovimentacao
  valor           Float
  metodoPagamento MetodoPagamento
  descricao       String
  criadoEm        DateTime         @default(now())
  data            DateTime         @default(now())
  loja            Loja             @relation(fields: [lojaId], references: [id])
  lojaId          String

  @@map("movimentacoes_financeiras")
}
